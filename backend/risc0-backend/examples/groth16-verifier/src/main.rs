// Copyright 2024 RISC Zero, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

use groth16_verifier_methods::{GROTH16_VERIFIER_ELF, GROTH16_VERIFIER_ID};
use risc0_groth16::{
    Fr, ProofJson, PublicInputsJson, Seal, Verifier, VerifyingKey, VerifyingKeyJson,
};
use risc0_zkvm::{
    default_prover,
    sha::{Digest, Digestible},
    ExecutorEnv,
};

const PROOF: &str = include_str!("data/proof.json");
const PUBLIC_INPUTS: &str = include_str!("data/public.json");
const VERIFICATION_KEY: &str = include_str!("data/verification_key.json");

fn main() {
    // Verification_key, proof and public witness generated by SnarkJS using Groth16 over BN254
    // (https://docs.circom.io/getting-started/proving-circuits/)
    let proof_json: ProofJson = serde_json::from_str(PROOF).unwrap();
    let public_inputs_json = PublicInputsJson {
        values: serde_json::from_str(PUBLIC_INPUTS).unwrap(),
    };
    let verifying_key_json: VerifyingKeyJson = serde_json::from_str(VERIFICATION_KEY).unwrap();

    // Convert from the JSON data structure, with string encoded values.
    let seal: Seal = proof_json.try_into().unwrap();
    let public_inputs: Vec<Fr> = public_inputs_json.to_scalar().unwrap();
    let verifying_key: VerifyingKey = verifying_key_json.verifying_key().unwrap();

    // groth16 proof verification on the host, to check that it is indeed a verifying proof.
    Verifier::new(&seal, &public_inputs, &verifying_key)
        .unwrap()
        .verify()
        .unwrap();

    // We configure an ExecutorEnv with the groth16 verifier
    let env = ExecutorEnv::builder()
        .write(&(&seal, &public_inputs, &verifying_key))
        .unwrap()
        .build()
        .unwrap();

    // We run the prover to generate a receipt of correct verification
    let receipt = default_prover()
        .prove(env, GROTH16_VERIFIER_ELF)
        .unwrap()
        .receipt;

    // We verify the final receipt, which recursively verifies the Groth16 proof.
    receipt.verify(GROTH16_VERIFIER_ID).unwrap();

    // Decode the verifier key digest and public input digest from the guest
    let (committed_vk_digest, committed_input_digest): (Digest, Digest) =
        receipt.journal.decode().unwrap();

    assert_eq!(committed_vk_digest, verifying_key.digest());
    assert_eq!(committed_input_digest, public_inputs.digest());

    println!("Verification: OK!");
}
